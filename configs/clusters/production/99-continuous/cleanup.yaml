apiVersion: v1
kind: ServiceAccount
metadata:
  name: tekton-pipelinerun-cleaner
  namespace: continuous
  labels:
    app: tekton-pipelinerun-cleaner
    app.kubernetes.io/name: tekton-pipelinerun-cleaner
    app.kubernetes.io/component: pipelinerun-cleaner
    app.kubernetes.io/part-of: tekton
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-pipelinerun-cleaner
  namespace: continuous
  labels:
    app: tekton-pipelinerun-cleaner
    app.kubernetes.io/name: tekton-pipelinerun-cleaner
    app.kubernetes.io/component: pipelinerun-cleaner
    app.kubernetes.io/part-of: tekton
rules:
  - apiGroups:
      - tekton.dev
    resources:
      - pipelineruns
    verbs:
      - delete
      - get
      - watch
      - list
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: tekton-pipelinerun-cleaner
  namespace: continuous
  labels:
    app: tekton-pipelinerun-cleaner
    app.kubernetes.io/name: tekton-pipelinerun-cleaner
    app.kubernetes.io/component: pipelinerun-cleaner
    app.kubernetes.io/part-of: tekton
roleRef:
  kind: Role
  name: tekton-pipelinerun-cleaner
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: tekton-pipelinerun-cleaner
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: tekton-pipelinerun-cleaner
  namespace: continuous
  labels:
    app: tekton-pipelinerun-cleaner
    app.kubernetes.io/name: tekton-pipelinerun-cleaner
    app.kubernetes.io/component: pipelinerun-cleaner
    app.kubernetes.io/part-of: tekton
spec:
  schedule: "*/15 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccount: tekton-pipelinerun-cleaner
          containers:
            - name: kubectl
              image: docker.io/alpine/k8s:1.32.3 # {"$imagepolicy": "flux-system:alpine-k8s"}
              env:
                - name: NUM_TO_KEEP
                  value: "3"
              command:
                - /bin/bash
                - -e
                - -c
                - |
                  while read -r PIPELINE_TO_REMOVE; do
                    test -n "${PIPELINE_TO_REMOVE}" || continue;
                    kubectl delete pipelinerun ${PIPELINE_TO_REMOVE} \
                        && echo "$(date -Is) PipelineRun ${PIPELINE_TO_REMOVE} deleted." \
                        || echo "$(date -Is) Unable to delete PipelineRun ${PIPELINE_TO_REMOVE}.";
                  done < <(kubectl get pipelinerun --sort-by=.metadata.creationTimestamp -o json | python3 -c "$(cat <<EOF
                  import json
                  import os
                  import sys

                  NUM_TO_KEEP = int(os.environ['NUM_TO_KEEP'])

                  counts = dict()
                  for p in reversed(json.load(sys.stdin)['items']):
                    lables = p['metadata']['labels']
                    key = f'{lables["tekton.dev/pipeline"]}|{lables.get("triggers.tekton.dev/trigger", "")}'
                    if (n := counts.get(key, 0)) < NUM_TO_KEEP:
                      counts[key] = n + 1
                      continue
                    print(p['metadata']['name'])
                  EOF
                  )")
              resources:
                requests:
                  cpu: 50m
                  memory: 32Mi
                limits:
                  cpu: 100m
                  memory: 64Mi
---
apiVersion: image.toolkit.fluxcd.io/v1beta2
kind: ImageRepository
metadata:
  name: alpine-k8s
  namespace: flux-system
spec:
  image: docker.io/alpine/k8s
  interval: 1h
---
apiVersion: image.toolkit.fluxcd.io/v1beta2
kind: ImagePolicy
metadata:
  name: alpine-k8s
  namespace: flux-system
spec:
  imageRepositoryRef:
    name: alpine-k8s
  policy:
    semver:
      range: "*"
